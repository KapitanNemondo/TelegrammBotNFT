from email import message
from gc import callbacks
from random import randint
import re
import telebot
import message as ms
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
# import config
import bd


callback_capcha = ['üë•', 'üëæ', 'üê∞', 'üçÄ', 'üçå']
flag_capcha = False

bd.Connect()

#main variables
TOKEN = "5628398708:AAEL5B1CuGzQ4tHTF4Y6hjXyflL2Do2fjYU"
bot = telebot.TeleBot(TOKEN)

def DotMenu(message):
    markup = types.ReplyKeyboardRemove()
    return markup

def MainMenu(message):      # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.InlineKeyboardMarkup()

    btn1 = types.InlineKeyboardButton("üíº –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="my buy")
    btn2 = types.InlineKeyboardButton("üíµ –ö—É–ø–∏—Ç—å NFT", callback_data="buy nft")
    btn3 = types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞", callback_data="edit number")
    btn4 = types.InlineKeyboardButton("üè¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—á–µ—Ç", callback_data="chek score")
    markup.add(btn1, btn2, btn3, btn4)

    return markup


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–Ω —Å—á–µ—Ç–∞, —Ä–µ–∂–∏–º 4
def getUserAdressNFT(message):
    
    markup = types.InlineKeyboardMarkup()
    # Yes = types.InlineKeyboardButton("–î–∞", callback_data="Edit score: YES")
    # No = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="Edit score: NO")
    # ChekNumber = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="Edit score: Chek")
    Back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data="Back")


    # number_score.append(message.text)

    markup.add(Back)
    # bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–æ–º, "
    #                                  "–Ω–∞–∂–º–∏ –î–∞, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ù–µ—Ç", reply_markup = markup)
    mesg = bot.edit_message_text(chat_id=message.chat.id, 
                                message_id=message.id, 
                                text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–æ–º, "
                                     "–Ω–∞–∂–º–∏ –î–∞, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ù–µ—Ç",
                                reply_markup = markup)
    return mesg

    

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–Ω —Å—á–µ—Ç–∞, —Ä–µ–∂–∏–º 4
def getQ(message):

    markup = types.InlineKeyboardMarkup()
    Yes = types.InlineKeyboardButton("–î–∞", callback_data="Edit score: YES")
    No = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="Edit score: NO")
    # ChekNumber = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="Edit score: Chek")
    Back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data="Back")


    # number_score.append(message.text)

    markup.add(Yes, No, Back)

    return markup


# –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏, —Ä–µ–∂–∏–º 3
def BuyNFT(message):
                
    param = bd.GetParam(bd.ParamStatus.get_news)

    count = int(message.text[8:].replace('NFT', ''))
    
    for index in range(param["count_stage"]):
        if param["param_factor"][index] == count and param["param_status"][index] == '–∏–¥—ë—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç' and (param["param_avalible"][index] - param["param_sale"][index]) > 0:

            score = count * param["coast"]
            bot.send_message(message.chat.id, text="–î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: {score} Ton\n–ù–∞ —Å—á–µ—Ç:".format(score= score))

            bot.send_message(message.chat.id, text=f"`{bd.GetParam(bd.ParamStatus.get_mainTON)}`", parse_mode="Markdown")

            markup = types.InlineKeyboardMarkup()
            succsfull = types.InlineKeyboardButton("üíé–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥üíé", callback_data='transfer_conf')
            back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='Back')

            markup.add(succsfull, back)

            flag_stage = False

            bot.send_message(message.chat.id, text="–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥", reply_markup=markup)

            bd.NewSale(message.chat.id, count, score, index)

            break
                    
        else:
            flag_stage = True

    if flag_stage:   
        bot.send_message(message.chat.id, text='üîê–≠—Ç–∞–ø –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ªüîê')
        
# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
def BackMenu(message):
    bot.send_message(message.chat.id, text=ms.DayNews(), reply_markup = MainMenu(message))

def ChekUser(message):
    # markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # capcha_one = types.KeyboardButton(text=callback_capcha[0])
    # capcha_two = types.KeyboardButton(text=callback_capcha[1])
    # capcha_tree = types.KeyboardButton(text=callback_capcha[2])
    # capcha_four = types.KeyboardButton(text=callback_capcha[3])
    # capcha_five = types.KeyboardButton(text=callback_capcha[4])


    markup = types.InlineKeyboardMarkup()

    capcha_one = types.InlineKeyboardButton(text=callback_capcha[0], callback_data=callback_capcha[0])
    capcha_two = types.InlineKeyboardButton(text=callback_capcha[1], callback_data=callback_capcha[1])
    capcha_tree = types.InlineKeyboardButton(text=callback_capcha[2], callback_data=callback_capcha[2])
    capcha_four = types.InlineKeyboardButton(text=callback_capcha[3], callback_data=callback_capcha[3])
    capcha_five = types.InlineKeyboardButton(text=callback_capcha[4], callback_data=callback_capcha[4])

    markup.add(capcha_one, capcha_two, capcha_tree, capcha_four, capcha_five)
    
    markup.row_width = 2

    capcha_id = randint(0, 4)

    capcha = callback_capcha[capcha_id]

    bd.SetCapcha(message.chat.id, capcha_id)

    bot.send_message(message.chat.id, text="–î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
                                            "–î–ª—è —ç—Ç–æ–≥–æ, –Ω–∞–π–¥–∏—Ç–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–∑–æ–±—Ä–∞–µ–Ω–∏—è\n"
                                            f"{capcha}",
                    reply_markup=markup
    )


def ChekScore(message):
    bot.send_message(message.chat.id,
                        text="–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –≤–≤–µ–¥—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ?\n"
                             f"{message.text}",
                        reply_markup=getQ(message))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥

@bot.callback_query_handler(func = lambda call : True)
def ChekCapcha(call):
    # message = call.message
    global callback_capcha
    capcha_id = bd.GetCapcha(call.message.chat.id)
    if call.data == callback_capcha[capcha_id]:

        markup = types.InlineKeyboardMarkup()
        login = types.InlineKeyboardButton("üíª –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="login")
        markup.add(login)

        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text="üíéTON ELEPHANTSüíé\n–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n{message}".format(call.from_user, message=ms.HellouText()),
                                reply_markup=markup)

    elif call.data == "login":

        bd.NewUserNFT(call.message.chat.id, f"@{call.message.chat.username}")

        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text='‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å',
                                reply_markup= MainMenu(call.message))

    
    elif call.data == "my buy":
        
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text='–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏ \nNFT: {count}'.format(count=bd.GetScore(call.message.chat.id)),
                                reply_markup=MainMenu(call.message))

    elif call.data == "buy nft":
        if bd.ChekNumberScore(call.message.chat.id):

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

            param_stage, param_factor = bd.GetParam(bd.ParamStatus.get_factor)

            btn = []
            for i in range(param_stage):
                btn.append(types.KeyboardButton("–ö—É–ø–∏—Ç—å x{factor} NFT".format(factor=param_factor[i])))
                markup.add(btn[i])
                    
            back = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

            markup.add(back)
                    
            bot.send_message(call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É\n\n{news}'.format(news=ms.DayNews()), reply_markup= markup)
            # BuyNFT(call.message)
                
        else:
            bot.send_message(call.message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ üò¢\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É:')
            flag = True
    
    elif call.data == "edit number":
        mesg = getUserAdressNFT(call.message)
        bot.register_next_step_handler(mesg, ChekScore)
        # getUserAdressNFT(message)
    
    elif call.data == "chek score":
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text='–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —Å—á–µ—Ç: {score}'.format(score=bd.GetReadNumberScore(call.message.chat.id)),
                                reply_markup=MainMenu(call.message))
    
    elif call.data == "Edit score: YES":
        index = call.message.text.find("\n") + 1
        # print(call.message.text[index:])
        bd.ToWriteNumberScore(call.message.chat.id, call.message.text[index:])
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text="–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω", reply_markup=MainMenu(call.message))
        # flag = False
        # flag_text = False
        # number_score.clear()
        ChekMenu(call.message)

    elif call.data == "Edit score: No":
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        
        
    elif call.data == "transfer_conf":

        param = bd.GetParam(bd.ParamStatus.get_news)
        count, score, index = bd.GetSale(call.message.chat.id)

        if param["param_sale"][index] >= param["param_avalible"][index]:
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text='‚ùå–í—Å–µ —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω–æ, —ç—Ç–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω‚ùå', reply_markup=MainMenu(call.message))
        
        else:

            flag = bd.ToWriteBdNFT(call.message.chat.id)
            

            if flag:

                markup = types.InlineKeyboardMarkup()
                btn2 = types.InlineKeyboardButton("üíµ –ö—É–ø–∏—Ç—å NFT", callback_data="buy nft")
                back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='Back')

                markup.add(btn2, back)

                bot.edit_message_text(chat_id=call.message.chat.id, 
                                    message_id=call.message.id, 
                                    text='–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {count} —Å–ª–æ–Ω–æ–≤'.format(count=count), reply_markup=markup)
            else:
                bot.edit_message_text(chat_id=call.message.chat.id, 
                                    message_id=call.message.id, 
                                    text='‚ùå–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏‚ùå', reply_markup=MainMenu(call.message))
        
    elif call.data == "Back":
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MainMenu(call.message))
    else:
        bot.send_message(call.message.chat.id, text="üíéTON ELEPHANTSüíé\n–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n{message}".format(call.from_user, message=ms.BadText()))
    
    

           


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start_handler(message):

    ChekUser(message)

    
@bot.message_handler(content_types=['text'])
def boot_message(message):
    
    if message.chat.type == 'private':
        
        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, text="–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", reply_markup=DotMenu(message))
            bot.send_message(message.chat.id, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MainMenu(message))

        
        elif message.text[:8] == '–ö—É–ø–∏—Ç—å x':
            BuyNFT(message)

    
 


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
# command = sys.stdin.readline()
# if (len(command) != 0):
#     ms.c_m.EditParam(command[:-1])
    


bot.infinity_polling(timeout=30, long_polling_timeout = 10)