
from gc import callbacks
from os import access
from random import randint
import re
import telebot

import message as ms
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
# import config
import bd

import enum
# import config
import sys
import operator
import referal_sys

from config import *




bd.Connect()






# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–Ω —Å—á–µ—Ç–∞, —Ä–µ–∂–∏–º 4
def getUserAdressNFT(message):
    
    markup = types.InlineKeyboardMarkup()
    # Yes = types.InlineKeyboardButton("–î–∞", callback_data="Edit score: YES")
    # No = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="Edit score: NO")
    # ChekNumber = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="Edit score: Chek")
    Back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data="Back")


    # number_score.append(message.text)

    markup.add(Back)
    # bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–æ–º, "
    #                                  "–Ω–∞–∂–º–∏ –î–∞, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ù–µ—Ç", reply_markup = markup)
    mesg = bot.edit_message_text(chat_id=message.chat.id, 
                                message_id=message.id, 
                                text="""
–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ TON-–∫–æ—à–µ–ª—å–∫–∞üíé
–ï—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –î–∞¬ª, –µ—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –ù–µ—Ç¬ª
                                """,
                                reply_markup = markup)
    return mesg

def getUserLoginPassword(message):
    
    markup = types.InlineKeyboardMarkup()
    # Yes = types.InlineKeyboardButton("–î–∞", callback_data="Edit score: YES")
    # No = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="Edit score: NO")
    # ChekNumber = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="Edit score: Chek")
    Back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data="Back")


    # number_score.append(message.text)

    markup.add(Back)
    # bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–æ–º, "
    #                                  "–Ω–∞–∂–º–∏ –î–∞, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ù–µ—Ç", reply_markup = markup)
    mesg = bot.edit_message_text(chat_id=message.chat.id, 
                                message_id=message.id, 
                                text="""
–ï—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –î–∞¬ª, –µ—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –ù–µ—Ç¬ª
                                """,
                                reply_markup = markup)
    return mesg

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–Ω —Å—á–µ—Ç–∞, —Ä–µ–∂–∏–º 4
def getQ(message):

    markup = types.InlineKeyboardMarkup()
    Yes = types.InlineKeyboardButton("–î–∞", callback_data="Edit score: YES")
    No = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="Edit score: NO")
    # ChekNumber = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="Edit score: Chek")
    Back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data="Back")


    # number_score.append(message.text)

    markup.add(Yes, No, Back)

    return markup



def getLogin(message):

    markup = types.InlineKeyboardMarkup()
    Yes = types.InlineKeyboardButton("–î–∞", callback_data="Edit LoginPass: YES")
    No = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="Edit LoginPass: NO")
    # ChekNumber = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="Edit score: Chek")
    Back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data="Back")


    # number_score.append(message.text)

    markup.add(Yes, No, Back)

    return markup

# –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏, —Ä–µ–∂–∏–º 3
def BuyNFT(message, count):
                
    # param = bd.GetParam(bd.ParamStatus.get_news, tg_id=message.chat.id)

    # count = int(message.text[8:].replace('NFT', ''))
    
    # for index in range(param["count_stage"]):
    #     if param["param_factor"][index] == count and param["param_status"][index] == '–∏–¥—ë—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç' and (param["param_avalible"][index] - param["param_sale"][index]) > 0:

    if count == 1:
        score = 20

    elif count == 3:
        score = 55

    elif count == 5:
        score = 75

    elif count == 10:
        score = 140
    
    bot.send_message(message.chat.id, text="–î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: {score} Ton\n–ù–∞ —Å—á–µ—Ç:".format(score= score))

    bot.send_message(message.chat.id, text=f"`{bd.GetParam(bd.ParamStatus.get_mainTON)}`", parse_mode="Markdown")

    markup = types.InlineKeyboardMarkup()
    succsfull = types.InlineKeyboardButton("üíé–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥üíé", callback_data='transfer_conf')
    back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='Back')

    markup.add(succsfull, back)


    bot.send_message(message.chat.id, text="–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥", reply_markup=markup)

    bd.NewSale(message.chat.id, count, score)

    #         break
                    
    #     else:
    #         flag_stage = True

    # if flag_stage:   
    #     bot.send_message(message.chat.id, text='üîê–≠—Ç–∞–ø –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ªüîê')
        
# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
def BackMenu(message):
    bot.send_message(message.chat.id, text=ms.DayNews(message.chat.id), reply_markup = MainMenu(message))

def ChekUser(message, id_refer):
    # markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # capcha_one = types.KeyboardButton(text=callback_capcha[0])
    # capcha_two = types.KeyboardButton(text=callback_capcha[1])
    # capcha_tree = types.KeyboardButton(text=callback_capcha[2])
    # capcha_four = types.KeyboardButton(text=callback_capcha[3])
    # capcha_five = types.KeyboardButton(text=callback_capcha[4])


    markup = types.InlineKeyboardMarkup()

    capcha_one = types.InlineKeyboardButton(text=callback_capcha[0], callback_data=callback_capcha[0])
    capcha_two = types.InlineKeyboardButton(text=callback_capcha[1], callback_data=callback_capcha[1])
    capcha_tree = types.InlineKeyboardButton(text=callback_capcha[2], callback_data=callback_capcha[2])
    capcha_four = types.InlineKeyboardButton(text=callback_capcha[3], callback_data=callback_capcha[3])
    capcha_five = types.InlineKeyboardButton(text=callback_capcha[4], callback_data=callback_capcha[4])

    markup.add(capcha_one, capcha_two, capcha_tree, capcha_four, capcha_five)
    
    markup.row_width = 2

    capcha_id = randint(0, 4)

    capcha = callback_capcha[capcha_id]

    bd.SetCapcha(message.chat.id, capcha_id, id_refer)

    print("[Set Capcha]", capcha_id, capcha)

    bot.send_message(message.chat.id, text="–î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
                                            "–î–ª—è —ç—Ç–æ–≥–æ, –Ω–∞–π–¥–∏—Ç–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–∑–æ–±—Ä–∞–µ–Ω–∏—è\n"
                                            f"{capcha}",
                    reply_markup=markup
    )


def ChekScore(message):
    bot.send_message(message.chat.id,
                        text="–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –≤–≤–µ–¥—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ?\n"
                             f"{message.text}",
                        reply_markup=getQ(message))

def LoginPass(message):
    text = message.text
    login = text[:text.find("\n")]
    passwd = text[text.find("\n"):]

    bot.send_message(message.chat.id,
                        text="–í–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞—é—Ç?\n"
                             f"–õ–æ–≥–∏–µ:`{login}\n"
                             f"–ü–∞—Ä–æ–ª—å:{passwd}`",
                             parse_mode="Markdown",
                        reply_markup=getLogin(message))


def GoPlay(message):
    login = bd.GetPlayLogin(message)
    bot.send_message(message.chat.id, text=f"–í–∞—à –ª–æ–≥–∏–Ω: `{login}`", parse_mode="Markdown")
    

    status = bd.WaitPassword(message)

    if status[0] == "Enter Succses":
        bot.send_message(message.chat.id, text=f"–í–∞—à –∫–ª—é—á –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É:\n`{status[1]}`", parse_mode="Markdown")
        BackMenu(message)
    else:
        bot.send_message(message.chat.id, text="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        BackMenu(message)

def StartPlay(message):

    print("[Start Play]")

    login_verifity = bd.GetShaLogin(message)

    print("[Start Play :: login_verifity]", login_verifity)

    if login_verifity == "LOGIN":


        bot.send_message(message.chat.id, text=f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ\n"
                                                "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ\n"
                                                "–î–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫\n"
                                                "–ü—Ä–∏–º–µ—Ä\n\n"
                                                "`Ivan45\nkapusta`", parse_mode="Markdown")
    
    elif login_verifity == "NO LOGIN":
        chek_buy = bd.GetScoreNFT_Play(message.chat.id)

        if chek_buy == "YES":
            bot.send_message(message.chat.id,
                             text=f"–í—ã –∫—É–ø–∏–ª–∏ NFT –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n"
                                    "–ó–∞ —ç—Ç–æ –í—ã –ø–æ—É—á–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–µ\n"
                                    "–î–ª—è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∏–≥—Ä–µ —Å–æ–∑–¥–∞–π—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤ —Å–ª—É–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                    "–ü—Ä–∏–º–µ—Ä\n"
                                    "`Ivan45\nkapusta`\n"

                                    "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤–≤–µ–¥—ë—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `–ó–∞—Ä–µ–≥–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—Å—è`",
                                    parse_mode="Markdown",
                                    reply_markup=PlayRegistrMenu(message))

        elif chek_buy == "NO":
            bot.send_message(message.chat.id,
                             text="–í—ã –µ—â—ë –Ω–µ –∫—É–ø–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π NFT –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –∫—É–ø–∏—Ç–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∏–≥—Ä–µ\n",
                            reply_markup=BackMenu(message))
    

    


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥

@bot.callback_query_handler(func = lambda call : True)
def ChekCapcha(call):
    # message = call.message
    global callback_capcha
    capcha_id = bd.GetCapcha(call.message.chat.id)
    print("[Get Capcha]", capcha_id, callback_capcha[capcha_id], "\n")

    if call.data == callback_capcha[capcha_id]:

        acsess = bd.GetAcsess(call.message.chat.id)

        if access:

            markup = types.InlineKeyboardMarkup()
            login = types.InlineKeyboardButton("üíª –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="login")
            markup.add(login)

            # print(call.message.chat.id)

            bot.send_photo(chat_id=call.message.chat.id,
                           photo=open("photo/ded_moroz.jpg", "rb"),
                           caption="üíéTON ELEPHANTSüíé\n–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n{message}".format(call.from_user, message=ms.HellouText(call.message.chat.id)),
                           reply_markup=markup)

            # bot.edit_message_text(chat_id=call.message.chat.id, 
            #                         message_id=call.message.id, 
            #                         text="üíéTON ELEPHANTSüíé\n–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n{message}".format(call.from_user, message=ms.HellouText(call.message.chat.id)),
            #                         reply_markup=markup)

            
            
            # print("OK")

        else:
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                    message_id=call.message.id, 
                                    text="üíéTON ELEPHANTSüíé\n–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n{message}".format(call.from_user, message=ms.DayNews(call.message.chat.id))
                                )
        # elif acsess == bd.ParamList.time_close:
        #     bot.edit_message_text(chat_id=call.message.chat.id, 
        #                             message_id=call.message.id, 
        #                             text="üíéTON ELEPHANTSüíé\n–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n{message}".format(call.from_user, message=ms.BlockTime(call.message.chat.id))
        #                         )

    elif call.data == "login":

        bd.NewUserNFT(call.message.chat.id, f"@{call.message.chat.username}")

        # bot.edit_message_text(chat_id=call.message.chat.id, 
        #                         message_id=call.message.id, 
        #                         text='‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å')

        bot.edit_message_caption(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                caption='‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å')

        bot.send_message(chat_id=call.message.chat.id, 
                         text="üíéTON ELEPHANTSüíé\n–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n{message}".format(call.from_user, message=ms.BlockText(call.message.chat.id)),
                         reply_markup=MainMenu(call.message))
        
        

        
        # referal_sys.StartMessage(call.message)
    
    elif call.data == "my nft":
        
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text='–í–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å NFTüíé',
                                reply_markup=NFT_Menu(call.message))
    
    elif call.data == "refer programm":
        referal_sys.StartMessage(call.message)

    
    elif call.data == "my buy":
        
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text='–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏ \nNFT: {count}'.format(count=bd.GetScore(call.message.chat.id)),
                                reply_markup=NFT_Menu(call.message))

    elif call.data == "buy nft":
        if bd.ChekNumberScore(call.message.chat.id):

            markup = types.InlineKeyboardMarkup()

            param_stage, param_factor = bd.GetParam(bd.ParamStatus.get_factor)

            # btn = []
            # for i in range(param_stage):
            #     btn.append(types.KeyboardButton("–ö—É–ø–∏—Ç—å x{factor} NFT".format(factor=param_factor[i])))
            #     markup.add(btn[i])

            buy_x1 = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Ö1 NFT", callback_data="buy x1")
            buy_x3 = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Ö3 NFT", callback_data="buy x3")
            buy_x5 = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Ö5 NFT", callback_data="buy x5")
            buy_x10 = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Ö10 NFT", callback_data="buy x10")
                    
            back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="Back")

            markup.add(buy_x1, buy_x3, buy_x5, buy_x10, back)
                    
            bot.send_message(call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É\n\n{news}'.format(news=ms.DayNews(call.message.chat.id)), reply_markup= markup)
            # BuyNFT(call.message)
                
        else:
            bot.send_message(call.message.chat.id, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ üò¢\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É:')
            flag = True
    
    elif call.data == "edit number":
        mesg = getUserAdressNFT(call.message)
        bot.register_next_step_handler(mesg, ChekScore)
        # getUserAdressNFT(message)
    
    elif call.data == "chek score":
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text='–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —Å—á—ë—Ç üí≥:\n `{score}`'.format(score=bd.GetReadNumberScore(call.message.chat.id)),
                                reply_markup=NFT_Menu(call.message), parse_mode="MarkDown")
    
    elif call.data == "Edit score: YES":
        index = call.message.text.find("\n") + 1
        # print(call.message.text[index:])
        bd.ToWriteNumberScore(call.message.chat.id, call.message.text[index:])
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text="–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω", reply_markup=NFT_Menu(call.message))
        # flag = False
        # flag_text = False
        # number_score.clear()
        # ChekMenu(call.message)
    
    elif call.data == "Edit LoginPass: YES":
        index = call.message.text.find("\n") + 3
        # print(call.message.text[index:])

        text = call.message.text[index:]

        login = text[:text.find("\n")]
        passwd = text[text.find("\n"):]

        bd.ToWriteLoginPass(call.message.chat.id, login, passwd)
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text="–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –Ω–µ —Ç–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å!", reply_markup=NFT_Menu(call.message))


    elif call.data == "RegistrInPlay":
        mesg = getUserLoginPassword(call.message)
        bot.register_next_step_handler(mesg, LoginPass)
    

    elif call.data == "Edit score: No":
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        
        
    elif call.data == "transfer_conf":

        param = bd.GetParam(bd.ParamStatus.get_news, tg_id=call.message.chat.id)
        count, score, index = bd.GetSale(call.message.chat.id)

        # if param["param_sale"][index] >= param["param_avalible"][index]:
        #     bot.edit_message_text(chat_id=call.message.chat.id, 
        #                         message_id=call.message.id, 
        #                         text='‚ùå–í—Å–µ —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω–æ, —ç—Ç–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω‚ùå', reply_markup=MainMenu(call.message))

        markup = types.InlineKeyboardMarkup()
       
        Back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data="Back")


        # number_score.append(message.text)

        markup.add(Back)
        
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text='–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –æ—Ç –æ–¥–Ω–æ–π –¥–æ —Ç—Ä—ë—Ö –º–∏–Ω—É—Ç',
                                reply_markup=markup)

        flag = bd.ToWriteBdNFT(call.message.chat.id)
        

        if flag:

            text = """–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! 

–í—ã –∫—É–ø–∏–ª–∏ {count} NFT Ton Elephantsüêò

–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–∞ –ù–æ–≤–æ–≥–æ–¥–Ω–µ–º Pre-Sale –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é –æ–¥–µ–∂–¥—É –≤ –≤–∏–¥–µ –∑–∏–º–Ω–µ–≥–æ —Å–≤–∏—Ç–µ—Ä–∞ü•≥

–ù–æ—Å–∏—Ç–µ –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µüòâ
–ö–æ–º–∞–Ω–¥–∞ Ton Elephantsüêò""".format(count = count)

            bot.send_photo(chat_id=call.message.chat.id,
                           photo=open("photo/switer.jpg", "rb"),
                           caption=text,
                           reply_markup=NFT_Menu(call.message))
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text='‚ùå–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏‚ùå', reply_markup=NFT_Menu(call.message))
        
    elif call.data == "Back":
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=NFT_Menu(call.message))
    
    elif call.data == "BackToMain":
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MainMenu(call.message))

    elif call.data == "GoPlay":
        bot.edit_message_text(chat_id=call.message.chat.id, 
                              message_id=call.message.id,
                                text="–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–ª—ë—Ç –Ω–∞—à –±–æ—Ç\n"
                                     "–ü–æ—Å–ª–µ —á–µ–≥–æ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ª–æ–≥–∏–Ω –≤ –∏–≥—Ä—É –∏ –¥–æ–∂–¥–∞—Ç—Å—è –∫–æ–≥–¥–∞ –±–æ—Ç –ø—Ä–∏—à—ë–ª –∫–æ–¥\n"
                                     "–ï—Å–ª–∏ –í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ –∏–≥—Ä—É –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è —É–∂–µ —Ä–∞–Ω–µ–µ –ø–ª—É—á–µ–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º,"
                                     " –µ—Å–ª–∏ –í—ã –∑–∞–±—ã–ª–∏ - –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ª–æ–≥–∏–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ",
                                reply_markup=GoPlay(call.message))
    
    elif call.data == "New Play":
        bot.edit_message_text(chat_id=call.message.chat.id, 
                              message_id=call.message.id,
                                text="–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –Ω–∞ –í–∞—à–µ–º —Å—á–µ—Ç—É —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É NFT –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n"
                                     "–ï—Å–ª–∏ –≤—ã –µ—â—ë –Ω–µ –∫—É–ø–∏–ª–∏ –Ω–∞—à—É NFT, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é\n")
        StartPlay(call.message)

    elif call.data == "updateDate":
        refer_id = referal_sys.baseRefer.GetIdRefer(call.message.chat.id)
        if refer_id != None:
            referal_sys.chek_sub_channel(bot.get_chat_member(chat_id=referal_sys.CHANEL_ID, user_id=call.message.chat.id),
                        bot.get_chat_member(chat_id=referal_sys.GRUPP_ID, user_id=call.message.chat.id),
                        call.message.chat.id, ref_id=refer_id
                        )
        else:
            referal_sys.chek_sub_channel(bot.get_chat_member(chat_id=referal_sys.CHANEL_ID, user_id=call.message.chat.id),
                        bot.get_chat_member(chat_id=referal_sys.GRUPP_ID, user_id=call.message.chat.id),
                        call.message.chat.id, ref_id=refer_id
                        )
        
    elif call.data == "getReferUrl":
        referal_sys.baseRefer.NewUser(call.message.chat.id)
        bot.send_message(call.message.chat.id,
                        text="–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:"
                            "\n`{url}`".format(url=referal_sys.main_url + str(call.message.chat.id)),
                        reply_markup=show_data_user(call.message.chat.id), parse_mode="MarkDown"
                        )

    elif call.data == "getScore":
        bot.send_message(call.message.chat.id, text="–í–∞—à —Å—á–µ—Ç: {count}".format(count=referal_sys.baseRefer.GetScore(call.message.chat.id)))
    
    elif call.data == "myUrl":
        bot.send_message(call.message.chat.id,
                            text="–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{url}`".format(url=referal_sys.main_url + str(call.message.chat.id)),
                            parse_mode="MarkDown"
                        )
    
    elif call.data == "GetInfoRefer":

        markup = types.InlineKeyboardMarkup()
        back_Refer = types.InlineKeyboardButton(text="‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="refer programm")


        markup.add(back_Refer)
        text = """–í—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π? –î–∞–≤–∞–π—Ç–µ –º—ã –≤–∞–º –≤—Å—ë —Ä–∞—Å—Å–∫–∞–∂–µ–ºüëåüèª
–í —á—ë–º —Å–º—ã—Å–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã?
–í—Å—ë –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ. –í—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ª—é–¥–µ–π –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –∏–≥—Ä–µ, –∞ —Ç–∞–∫ –∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —á–∞—Å—Ç—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã Ton Elephantsüêòüíé

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, 
–ö–æ–º–∞–Ω–¥–∞ Ton Elephantsüêòüíé"""
        bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text=text,
                                reply_markup=markup)

    elif call.data == "buy x1":
        BuyNFT(call.message, 1)
    
    elif call.data == "buy x3":
        BuyNFT(call.message, 3)

    elif call.data == "buy x5":
        BuyNFT(call.message, 5)

    elif call.data == "buy x10":
        BuyNFT(call.message, 10)
    
    elif call.data == "getAllUser":
        referal_sys.GetInfoUser()

    else:
        bot.send_message(call.message.chat.id, text="üíéTON ELEPHANTSüíé\n–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n{message}".format(call.from_user, message=ms.BadText()))
    
    

           


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start_handler(message):
    id_refer = message.text[7:]

    if id_refer == "":
        id_refer = 0
    else:
        id_refer = int(id_refer)
    ChekUser(message, id_refer)
    
    


    
@bot.message_handler(content_types=['text'])
def boot_message(message):
    
    if message.chat.type == 'private':

        print("[User index Text]", message.text.index)

    
 


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
# command = sys.stdin.readline()
# if (len(command) != 0):
#     ms.c_m.EditParam(command[:-1])
    


bot.infinity_polling(timeout=30, long_polling_timeout = 10)